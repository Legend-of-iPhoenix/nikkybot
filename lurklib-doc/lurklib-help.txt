Help on package lurklib:

NAME
    lurklib - High level abstraction Lurklib file.

PACKAGE CONTENTS
    channel
    connection
    core
    exceptions
    optional
    sending
    squeries
    uqueries
    variables

CLASSES
    lurklib.core._Core(lurklib.variables._Variables, lurklib.exceptions._Exceptions, lurklib.connection._Connection, lurklib.channel._Channel, lurklib.sending._Sending, lurklib.uqueries._UserQueries, lurklib.squeries._ServerQueries, lurklib.optional._Optional)
        Client
    
    class Client(lurklib.core._Core)
     |  High level IRC abstraction class
     |  
     |  Method resolution order:
     |      Client
     |      lurklib.core._Core
     |      lurklib.variables._Variables
     |      lurklib.exceptions._Exceptions
     |      lurklib.connection._Connection
     |      lurklib.channel._Channel
     |      lurklib.sending._Sending
     |      lurklib.uqueries._UserQueries
     |      lurklib.squeries._ServerQueries
     |      lurklib.optional._Optional
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  mainloop(self)
     |      Handles events and calls their handler for infinity.
     |  
     |  on_chanctcp(self, from_, channel, message)
     |  
     |  on_chanmsg(self, from_, channel, message)
     |  
     |  on_channotice(self, from_, channel, notice)
     |  
     |  on_cmode(self, from_, channel, mode)
     |  
     |  on_connect(self)
     |  
     |  on_ctcp_reply(self, from_, message)
     |  
     |  on_error(self, message)
     |  
     |  on_exception(self, exception)
     |  
     |  on_invite(self, from_, channel)
     |  
     |  on_join(self, from_, channel)
     |  
     |  on_kick(self, from_, channel, who, reason)
     |  
     |  on_lusers(self, data)
     |  
     |  on_nick(self, from_, new_nick)
     |  
     |  on_part(self, from_, channel, reason)
     |  
     |  on_privctcp(self, from_, message)
     |  
     |  on_privmsg(self, from_, message)
     |  
     |  on_privnotice(self, from_, notice)
     |  
     |  on_quit(self, from_, reason)
     |  
     |  on_topic(self, from_, channel, new_topic)
     |  
     |  on_umode(self, mode)
     |  
     |  on_unknown(self, message)
     |  
     |  process_once(self, timeout=0.01)
     |      Handles an event and calls it's handler
     |      Optional arguments:
     |      * timeout=0.01 - Wait for an event until the timeout is reached.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from lurklib.core._Core:
     |  
     |  __init__(self, server, port=None, nick='Lurklib', user='Lurklib', real_name='The Lurk Internet Relay Chat Library', password=None, tls=True, tls_verify=True, encoding='UTF-8', hide_called_events=True, UTC=False, proxy=False, proxy_type='SOCKS5', proxy_server=None, proxy_port=None, proxy_username=None, proxy_password=None)
     |      Initializes Lurklib and connects to the IRC server.
     |      Required arguments:
     |      * server - IRC server to connect to.
     |      Optional arguments:
     |      * port=None - IRC port to use.
     |          if tls is selected it defaults to 6697 -
     |          if not, it defaults to 6667.
     |      * nick='Lurklib' - IRC nick to use.
     |          If a tuple/list is specified it will try to use the first,
     |          and if the first is already -
     |          used it will try to use the second and so on.
     |      * user='Lurklib' - IRC username to use.
     |      * real_name='The Lurk Internet Relay Chat Library'
     |           - IRC real name to use.
     |      * password=None - IRC server password.
     |      * tls=True - Should the connection use TLS/SSL?
     |      * tls_verify=True - Verify the TLS certificate?
     |              Only works with Python 3.
     |      * encoding='UTF-8' - The encoding that should be used.
     |          if the IRC server specifies a CHARSET it will be used instead,
     |          however in the event of a LookupError it will fallback to this.
     |      * hide_called_events=True
     |           - Whether or not to hide events that are -
     |           generated by calling a Lurklib channel method.
     |      * UTC=False - Should Lurklib's time objects use UTC?
     |      * proxy=False - Should we use a proxy?
     |      * proxy_type='SOCKS5' - Proxy type: SOCKS5, SOCKS4 or HTTP
     |      * proxy_server=None - Proxy server's address
     |      * proxy_port=None - Proxy server's port
     |      * proxy_username=None - If SOCKS5 is used,
     |              a proxy username/password can be specified.
     |      * proxy_password=None - If SOCKS5 is used
     |              a proxy username/password can be specified.
     |  
     |  compare(self, first, second)
     |      Case in-sensitive comparison of two strings.
     |      Required arguments:
     |      * first - The first string to compare.
     |      * second - The second string to compare.
     |  
     |  ctcp_decode(self, msg)
     |      Decodes a CTCP message.
     |      Required arguments:
     |      msg - The message to be decoded.
     |      Returns the decoded version of the message.
     |  
     |  ctcp_encode(self, msg)
     |      CTCP encodes a message.
     |      Required arguments:
     |      msg - The message to be CTCP encoded.
     |      Returns the encoded version of the message.
     |  
     |  find(self, haystack, needle)
     |      Finds needle in haystack.
     |      If needle is found return True, if not return False.
     |      Required arguments:
     |      * haystack - Text to search in.
     |      * needle - Text to search for.
     |  
     |  readable(self, timeout=2)
     |      Checks whether self.recv() will block or not.
     |      Optional arguments:
     |      * timeout=1 - Wait for the socket to be readable,
     |          for timeout amount of time.
     |  
     |  recv(self, timeout=None)
     |      High-level IRC buffering system and processor.
     |      Optional arguments:
     |      * timeout=None - Time to wait before returning None.
     |          Defaults to waiting forever.
     |  
     |  send(self, msg, error_check=False)
     |      Send a raw string with the CR-LF appended to it.
     |      Required arguments:
     |      * msg - Message to send.
     |      Optional arguments:
     |      * error_check=False - Check for errors.
     |      If an error is found the relevant exception will be raised.
     |  
     |  stepback(self, append=False)
     |      Stepbacks/reverses the buffer.
     |      Optional arguments:
     |      * append=False - If True, appends the data onto the buffer;
     |                      else, it just steps the index back.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from lurklib.variables._Variables:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from lurklib.variables._Variables:
     |  
     |  priv_types = ('~', '&', '@', '%', '+')
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from lurklib.exceptions._Exceptions:
     |  
     |  exception(self, ncode)
     |      Looks up the exception in error_dictionary and raises it.
     |      Required arguments:
     |      * ncode - Error numerical code.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from lurklib.exceptions._Exceptions:
     |  
     |  AlreadyInChannel = <class 'lurklib.exceptions.AlreadyInChannel'>
     |  
     |  
     |  AlreadyRegistred = <class 'lurklib.exceptions.AlreadyRegistred'>
     |  
     |  
     |  BadChanMask = <class 'lurklib.exceptions.BadChanMask'>
     |  
     |  
     |  BadChannelKey = <class 'lurklib.exceptions.BadChannelKey'>
     |  
     |  
     |  BannedFromChan = <class 'lurklib.exceptions.BannedFromChan'>
     |  
     |  
     |  CannotSendToChan = <class 'lurklib.exceptions.CannotSendToChan'>
     |  
     |  
     |  CantKillServer = <class 'lurklib.exceptions.CantKillServer'>
     |  
     |  
     |  ChanOPrivsNeeded = <class 'lurklib.exceptions.ChanOPrivsNeeded'>
     |  
     |  
     |  ChannelIsFull = <class 'lurklib.exceptions.ChannelIsFull'>
     |  
     |  
     |  ErrorneusNickname = <class 'lurklib.exceptions.ErrorneusNickname'>
     |  
     |  
     |  IRCError = <class 'lurklib.exceptions.IRCError'>
     |  
     |  
     |  InviteOnlyChan = <class 'lurklib.exceptions.InviteOnlyChan'>
     |  
     |  
     |  KeySet = <class 'lurklib.exceptions.KeySet'>
     |  
     |  
     |  LurklibError = <class 'lurklib.exceptions.LurklibError'>
     |  
     |  
     |  MessageTooLong = <class 'lurklib.exceptions.MessageTooLong'>
     |  
     |  
     |  NeedMoreParams = <class 'lurklib.exceptions.NeedMoreParams'>
     |  
     |  
     |  NickCollision = <class 'lurklib.exceptions.NickCollision'>
     |  
     |  
     |  NicknameInUse = <class 'lurklib.exceptions.NicknameInUse'>
     |  
     |  
     |  NoChanModes = <class 'lurklib.exceptions.NoChanModes'>
     |  
     |  
     |  NoNickNameGiven = <class 'lurklib.exceptions.NoNickNameGiven'>
     |  
     |  
     |  NoOperHost = <class 'lurklib.exceptions.NoOperHost'>
     |  
     |  
     |  NoPrivileges = <class 'lurklib.exceptions.NoPrivileges'>
     |  
     |  
     |  NoRecipient = <class 'lurklib.exceptions.NoRecipient'>
     |  
     |  
     |  NoSuchChannel = <class 'lurklib.exceptions.NoSuchChannel'>
     |  
     |  
     |  NoSuchNick = <class 'lurklib.exceptions.NoSuchNick'>
     |  
     |  
     |  NoSuchServer = <class 'lurklib.exceptions.NoSuchServer'>
     |  
     |  
     |  NoTextToSend = <class 'lurklib.exceptions.NoTextToSend'>
     |  
     |  
     |  NoTopLevel = <class 'lurklib.exceptions.NoTopLevel'>
     |  
     |  
     |  NotImplemented = <class 'lurklib.exceptions.NotImplemented'>
     |  
     |  
     |  NotInChannel = <class 'lurklib.exceptions.NotInChannel'>
     |  
     |  
     |  NotOnChannel = <class 'lurklib.exceptions.NotOnChannel'>
     |  
     |  
     |  PasswdMismatch = <class 'lurklib.exceptions.PasswdMismatch'>
     |  
     |  
     |  Restricted = <class 'lurklib.exceptions.Restricted'>
     |  
     |  
     |  TooManyChannels = <class 'lurklib.exceptions.TooManyChannels'>
     |  
     |  
     |  TooManyTargets = <class 'lurklib.exceptions.TooManyTargets'>
     |  
     |  
     |  UmodeUnknownFlag = <class 'lurklib.exceptions.UmodeUnknownFlag'>
     |  
     |  
     |  UnavailReSource = <class 'lurklib.exceptions.UnavailReSource'>
     |  
     |  
     |  UnhandledEvent = <class 'lurklib.exceptions.UnhandledEvent'>
     |  
     |  
     |  UnknownMode = <class 'lurklib.exceptions.UnknownMode'>
     |  
     |  
     |  UserNotInChannel = <class 'lurklib.exceptions.UserNotInChannel'>
     |  
     |  
     |  UserOnChannel = <class 'lurklib.exceptions.UserOnChannel'>
     |  
     |  
     |  UsersDontMatch = <class 'lurklib.exceptions.UsersDontMatch'>
     |  
     |  
     |  WildTopLevel = <class 'lurklib.exceptions.WildTopLevel'>
     |  
     |  
     |  error_dictionary = {'401': 'NoSuchNick', '402': 'NoSuchServer', '403':...
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from lurklib.connection._Connection:
     |  
     |  __enter__(self)
     |  
     |  __exit__(self, type, value, traceback)
     |      For use with the Python 'with' statement.
     |  
     |  latency(self)
     |      Checks the connection latency.
     |  
     |  nick(self, nick)
     |      Sets your nick.
     |      Required arguments:
     |      * nick - New nick or a tuple of possible new nicks.
     |  
     |  oper(self, name, password)
     |      Opers up.
     |      Required arguments:
     |      * name - Oper name.
     |      * password - Oper password.
     |  
     |  quit(self, reason='')
     |      Sends a QUIT message, closes the connection and -
     |          ends Lurklib's main loop.
     |      Optional arguments:
     |      * reason='' - Reason for quitting.
     |  
     |  service(self)
     |      Not implemented.
     |  
     |  squit(self, server, reason='')
     |      Quits a server.
     |      Required arguments:
     |      * server - Server to quit.
     |      Optional arguments:
     |      * reason='' - Reason for the server quitting.
     |  
     |  umode(self, nick, modes='')
     |      Sets/gets user modes.
     |      Required arguments:
     |      * nick - Nick to set/get user modes for.
     |      Optional arguments:
     |      * modes='' - Sets these user modes on a nick.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from lurklib.channel._Channel:
     |  
     |  banlist(self, channel)
     |      Get the channel banlist.
     |      Required arguments:
     |      * channel - Channel of which to get the banlist for.
     |  
     |  cmode(self, channel, modes='')
     |      Sets or gets the channel mode.
     |      Required arguments:
     |      * channel - Channel to set/get modes of.
     |      Optional arguments:
     |      * modes='' - Modes to set.
     |          If not specified return the modes of the channel.
     |  
     |  exceptlist(self, channel)
     |      Get the channel exceptlist.
     |      Required arguments:
     |      * channel - Channel of which to get the exceptlist for.
     |  
     |  invite(self, channel, nick)
     |      Invite someone to a channel.
     |      Required arguments:
     |      * channel - Channel to invite them to.
     |      * nick - Nick to invite.
     |  
     |  invitelist(self, channel)
     |      Get the channel invitelist.
     |      Required arguments:
     |      * channel - Channel of which to get the invitelist for.
     |  
     |  is_in_channel(self, channel, should_be=True)
     |      Find out if you are in a channel.
     |      Required arguments:
     |      * channel - Channel to check whether you are in it or not.
     |      * should_be - If True, raise an exception if you aren't in the channel;
     |                  If False, raise an exception if you are in the channel.
     |  
     |  join_(self, channel, key=None, process_only=False)
     |      Joins a channel.
     |      Returns a tuple of information regarding the channel.
     |      Channel Information:
     |      * [0] - A tuple containing /NAMES.
     |      * [1] - Channel topic.
     |      * [2] - Tuple containing information regarding of whom set the topic.
     |      * [3] - Time object about when the topic was set.
     |      Required arguments:
     |      * channel - The channel to join.
     |      Optional arguments:
     |      * key=None - Channel key.
     |      * process_only=False - Only process a join, don't request one.
     |  
     |  kick(self, channel, nick, reason='')
     |      Kick someone from a channel.
     |      Required arguments:
     |      * channel - Channel to kick them from.
     |      * nick - Nick to kick.
     |      Optional arguments:
     |      * reason - Reason for the kick.
     |  
     |  list_(self)
     |      Gets a list of channels on the server.
     |  
     |  names(self, channel)
     |      Get a list of users in the channel.
     |      Required arguments:
     |      * channel - Channel to get list of users for.
     |  
     |  parse_cmode_string(self, mode_string, channel)
     |      Parse a channel mode string and update the IRC.channels dictionary.
     |      Required arguments:
     |      * mode_string - Mode string to parse.
     |      * channel - Channel of which the modes were set.
     |  
     |  part(self, channel, reason='')
     |      Part a channel.
     |      Required arguments:
     |      * channel - Channel to part.
     |      Optional arguments:
     |      * reason='' - Reason for parting.
     |  
     |  topic(self, channel, topic=None)
     |      Sets/gets the channel topic.
     |      Required arguments:
     |      * channel - Channel to set/get the topic for.
     |      Optional arguments:
     |      * topic - Topic to set.
     |          If not specified the current channel topic will be returned.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from lurklib.sending._Sending:
     |  
     |  notice(self, target, message)
     |      Sends a NOTICE to someone.
     |      Required arguments:
     |      * target - Who to send the message to.
     |      * message - Message to send.
     |  
     |  privmsg(self, target, message)
     |      Sends a PRIVMSG to someone.
     |      Required arguments:
     |      * target - Who to send the message to.
     |      * message - Message to send.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from lurklib.uqueries._UserQueries:
     |  
     |  who(self, target)
     |      Runs a WHO on a target
     |      Required arguments:
     |      * target - /WHO <target>
     |      Returns a dictionary, with a nick as the key and -
     |          the value is a list in the form of;
     |         [0] - Username
     |         [1] - Priv level
     |         [2] - Real name
     |         [3] - Hostname
     |  
     |  whois(self, nick)
     |      Runs a WHOIS on someone.
     |      Required arguments:
     |      * nick - Nick to whois.
     |      Returns a dictionary:
     |          IDENT == The user's ident.
     |          HOST == The user's host.
     |          NAME == The user's real name.
     |          SERVER == The server the user is on.
     |          SERVER_INFO == The name of the server the user is on.
     |          CHANNELS == A list of channels the user is on.
     |          IDLE == The user's idle time.
     |          AWAY, present if the user is away,
     |              returns a string containing their away message.
     |          OP == Present if the user is an IRC operator.
     |          ETC == Other data sent in response to the WHOIS query.
     |  
     |  whowas(self, nick)
     |      Runs a WHOWAS on someone.
     |      Required arguments:
     |      * nick - Nick to run a WHOWAS on.
     |      Returns a list:
     |         [0] The user's nick.
     |         [1] The user's ident.
     |         [2] The user's host.
     |         [3] The user's real name.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from lurklib.squeries._ServerQueries:
     |  
     |  admin(self, server=None)
     |      Get the admin information.
     |      Optional arguments:
     |      * server=None - Get admin information for -
     |          server instead of the current server.
     |  
     |  get_lusers(self, mask=None, target=None)
     |      Get the LUSERS information.
     |      Optional arguments:
     |      * mask=None - Mask to get LUSERS information of.
     |      * target=None - Forward the query.
     |  
     |  get_motd(self, server=None)
     |      Gets the server's MOTD.
     |      Optional arguments:
     |      * server=None - Server to get the MOTD of.
     |  
     |  get_version(self, target=None)
     |      Get the servers VERSION information.
     |      Optional arguments:
     |      * target=None - Server to get the VERSION information of.
     |  
     |  kill(self, nick, reason='')
     |      Kill someone
     |      Required arguments:
     |      * nick - Nick to kill.
     |      Optional arguments:
     |      * reason='' - Reason for killing them.
     |  
     |  links(self, r_server=None, mask=None)
     |      Get LINKS information.
     |      Optional arguments:
     |      * r_server=None - Forward the query to this server.
     |      * mask=None - Match mask servers.
     |  
     |  s_connect(self, server, port, r_server=None)
     |      Link a server.
     |      Required arguments:
     |      * server - Server to link with.
     |      * port - Port to use.
     |      Optional arguments:
     |      * r_server=None - Link r_server with server.
     |  
     |  s_info(self, server=None)
     |      Runs the INFO command on a server.
     |      Optional arguments:
     |      * server=None - Get INFO for server instead of the current server.
     |  
     |  servlist(self)
     |      Not implemented.
     |  
     |  squery(self, sname, msg)
     |      Send a SQUERY.
     |      Required arguments:
     |      * sname - Service name.
     |      * msg - Message to send.
     |  
     |  stats(self, query=None, target=None)
     |      Get the server's STATS information.
     |      Optional arguments:
     |      * query=None - STATS Query.
     |      * target=None - Target server.
     |  
     |  time(self, target=None)
     |      Get server time.
     |      Optional arguments:
     |      * target=None - Target server.
     |  
     |  trace(self)
     |      Not implemented.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from lurklib.optional._Optional:
     |  
     |  away(self, msg='')
     |      Sets/unsets your away status.
     |      Optional arguments:
     |      * msg='' - Away reason.
     |  
     |  die(self, password='')
     |      Tells the IRCd to die.
     |      Optional arguments:
     |      * password='' - Die command password.
     |  
     |  ison(self, nicks)
     |      Checks if a nick is on or not.
     |      Returns list of nicks online.
     |      Required arguments:
     |      * nick - Nick to check.
     |  
     |  operwall(self, msg)
     |      Sends a wallops message.
     |      Required arguments:
     |      * msg - Message to send.
     |  
     |  rehash(self)
     |      Rehashes the IRCd's configuration file.
     |  
     |  restart(self, password='')
     |      Tells the IRCd to restart.
     |      Optional arguments:
     |      * password='' - Restart command password.
     |  
     |  summon(self)
     |      Not implemented.
     |  
     |  userhost(self, nicks)
     |      Runs a userhost on a nick.
     |      Required arguments:
     |      * nick - Nick to run a userhost on.
     |  
     |  users(self)
     |      Not implemented.

DATA
    with_statement = _Feature((2, 5, 0, 'alpha', 1), (2, 6, 0, 'alpha', 0)...

VERSION
    1.0.1

FILE
    /home/nikkybot/bot/lurklib/__init__.py

